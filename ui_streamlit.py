import os
import time
import html
import requests
import streamlit as st

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
DEFAULT_API_URL = os.getenv("API_URL", "http://localhost:8000/ask")
APP_TITLE = "ü§ñ AI Support RAG"
APP_DESC = "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ–ª—É—á–∏ –æ—Ç–≤–µ—Ç –æ—Ç RAG (FAISS+BM25) + GPT-4 Omni (GenAPI), —Å –ø–æ–∫–∞–∑–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."

# === –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ ===
st.set_page_config(page_title=APP_TITLE, page_icon="ü§ñ", layout="wide")
st.markdown(
    """
<style>
:root {
  --pri: #4F46E5;
  --radius: 12px;
}

/* –±–∞–∑–æ–≤–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è */
.block-container { padding-top: 2rem; padding-bottom: 1rem; }
.small { font-size: 0.85rem; opacity: 0.85; }

/* LIGHT THEME */
@media (prefers-color-scheme: light) {
  .answer { background: #f8fafc; border: 1px solid #e5e7eb; color: #0f172a; border-radius: var(--radius); padding: 14px; }
  .ctx    { background: #f9fafb; border: 1px solid #e5e7eb; color: #111827; border-radius: 10px; padding: 12px; }
  .divider { border-top: 1px solid #e5e7eb; margin: 8px 0 16px 0; }
  button[kind="primary"] { background: var(--pri); }
}

/* DARK THEME */
@media (prefers-color-scheme: dark) {
  .answer { background: #0b1220; border: 1px solid #1f2937; color: #e5e7eb; border-radius: var(--radius); padding: 14px; }
  .ctx    { background: #0f172a; border: 1px solid #243244; color: #e5e7eb; border-radius: 10px; padding: 12px; }
  .divider { border-top: 1px solid #1f2937; margin: 8px 0 16px 0; }
  button[kind="primary"] { background: var(--pri); }
}

/* –∏–Ω–ø—É—Ç –ø–æ–∫—Ä—É–ø–Ω–µ–µ */
.stTextInput > div > div > input { font-size: 1rem; }
</style>
""",
    unsafe_allow_html=True,
)

# === –°–∞–π–¥–±–∞—Ä ===
with st.sidebar:
    st.markdown(f"### {APP_TITLE}")
    st.write(APP_DESC)
    api_url = st.text_input("API URL", value=DEFAULT_API_URL)
    st.markdown("---")
    st.markdown("**–ü–æ–¥—Å–∫–∞–∑–∫–∏:**")
    st.markdown("- –£–±–µ–¥–∏—Å—å, —á—Ç–æ FastAPI –∑–∞–ø—É—â–µ–Ω: `uvicorn app.main:app --reload`")
    st.markdown("- –ò–Ω–¥–µ–∫—Å —Å–æ–±—Ä–∞–Ω: `python indexer.py`")
    st.markdown("- –í–æ–ø—Ä–æ—Å –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ ‚Äî –±—ç–∫–µ–Ω–¥ —Ä–∞–∑–±–µ—Ä—ë—Ç—Å—è.")
    st.markdown("---")
    clear_btn = st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")

# === –°–æ—Å—Ç–æ—è–Ω–∏–µ ===
if "history" not in st.session_state:
    # —ç–ª–µ–º–µ–Ω—Ç—ã: (question, answer_html, context_list, latency_sec, ok)
    st.session_state.history = []

if clear_btn:
    st.session_state.history.clear()

# === –ó–∞–≥–æ–ª–æ–≤–æ–∫ ===
st.title(APP_TITLE)
st.caption("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ –±–∞–∑–µ retrieval-augmented generation. –í –æ—Ç–≤–µ—Ç–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã).")

# === –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ ===
col_inp, col_btn = st.columns([4, 1])
with col_inp:
    user_q = st.text_input("–í–∞—à –≤–æ–ø—Ä–æ—Å:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤?")
with col_btn:
    ask_clicked = st.button("–°–ø—Ä–æ—Å–∏—Ç—å", type="primary", use_container_width=True)

def call_api(question: str, url: str) -> dict:
    """POST /ask FastAPI. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å answer/context –ª–∏–±–æ –æ—à–∏–±–∫—É."""
    try:
        t0 = time.time()
        r = requests.post(url, json={"question": question}, timeout=60)
        latency = time.time() - t0
        if r.status_code == 200:
            data = r.json()
            data["_ok"] = True
            data["_latency"] = latency
            return data
        return {"_ok": False, "_latency": latency, "error": f"HTTP {r.status_code}: {r.text}"}
    except Exception as e:
        return {"_ok": False, "_latency": 0.0, "error": str(e)}

def as_html_with_br(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –∫–∞–∫ <br/>."""
    safe = html.escape(text).replace("\n", "<br/>")
    return safe

def html_to_plain(a_html: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞—à—É HTML-—Å—Ç—Ä–æ–∫—É (escape + <br/>) –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è st.error()."""
    return html.unescape(a_html.replace("<br/>", "\n"))

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ===
if ask_clicked and user_q.strip():
    resp = call_api(user_q.strip(), api_url)
    if resp.get("_ok"):
        st.session_state.history.append((
            user_q.strip(),
            as_html_with_br(resp.get("answer", "")),
            resp.get("context", []),
            resp.get("_latency", 0.0),
            True
        ))
    else:
        st.session_state.history.append((
            user_q.strip(),
            as_html_with_br(f"–û—à–∏–±–∫–∞: {resp.get('error','unknown')}"),
            [],
            resp.get("_latency", 0.0),
            False
        ))

# === –†–µ–Ω–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—Ä—Ö—É) ===
for q, a_html, ctx_list, lat, ok in reversed(st.session_state.history):
    with st.container():
        st.markdown(f"**‚ùì –í–æ–ø—Ä–æ—Å:** {html.escape(q)}")
        if ok:
            st.markdown(f"""<div class="answer"><b>‚úÖ –û—Ç–≤–µ—Ç:</b><br/>{a_html}</div>""", unsafe_allow_html=True)
            with st.expander("üìö –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π)"):
                if ctx_list:
                    for i, ctx in enumerate(ctx_list, start=1):
                        ctx_html = html.escape(ctx).replace("\n", "<br/>")
                        st.markdown(f"**–ò—Å—Ç–æ—á–Ω–∏–∫ [{i}]**")
                        st.markdown(f"<div class='ctx'>{ctx_html}</div>", unsafe_allow_html=True)
                        st.markdown("<span class='small'>–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ FAISS/BM25</span>",
                                    unsafe_allow_html=True)
                        st.markdown("<div class='divider'></div>", unsafe_allow_html=True)
                else:
                    st.info("–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –≤–æ–∑–≤—Ä–∞—â—ë–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –∏–Ω–¥–µ–∫—Å –ø—É—Å—Ç –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω).")

            st.caption(f"‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {lat:.2f} c ‚Ä¢ API: {api_url}")
        else:
            plain_err = html_to_plain(a_html)
            st.error(plain_err)
            st.caption(f"‚è± –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–Ω—è–ª–∞: {lat:.2f} c ‚Ä¢ API: {api_url}")
        st.markdown("<div class='divider'></div>", unsafe_allow_html=True)
